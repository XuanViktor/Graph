Bipartite Graphs
Trong lý thuyết đồ thị, đồ thị hai phía là một đồ thị đặc biệt, trong đó tập các đỉnh có thể được chia thành hai tập không giao nhau 
thảo mãn điều kiện không có cạnh nối hai đỉnh bất kỳ thuộc cùng một tập. Cho đồ thị vô hướng G = (V,E) hãy kiểm tra xem đồ thị đã cho là độ thị 2 phía hay không.

INPUT
Dòng đầu tiên gồm n và m tương ứng với n đỉnh và m cạnh
Dòng thứ 2 gồm m cạnh nối đỉnh i và đỉnh j.

Constraints
(1 <= N,M <= 1000)

OUTPUT
In ra YES nếu đồ thị hai phía ngược lại in NO

Sample Input          Output

5 4                    YES
1 2
3 2
4 3
4 5


6 5                    YES
2 1
2 3
3 4
5 4
1 6

#include <bits/stdc++.h>

using namespace std;

const int MAXN = 100005;
vector<int> adj[MAXN];
int color[MAXN];
int n,m, flag = 1;

void input(){
    cin >> n >> m;
    for (int i = 0; i < m; i++){
        int x,y; cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    for (int i = 1; i <= n; i++){
        sort(begin(adj[i]), end(adj[i]));
    }
}

void dfs(int u){ 
    for (int v : adj[u]){
        if (color[v] == 0){
            color[v] = 3 - color[u];
            dfs(v);
        }
        else if (color[v] == color[u]){
            flag = 0;
            return;
        }
    }
}

int main(){
    input();

    for (int i = 1; i <= n; i++){
        if (!color[i]){
            color[i] = 1;
            dfs(i);
        }
    }
    if (flag) cout << "YES";
    else cout << "NO";
}


// Dùng bfs()
vector<int> adj[MAXN];
int color[MAXN];
int n,m, flag = 1;

void input(){
    cin >> n >> m;
    for (int i = 0; i < m; i++){
        int x,y; cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    for (int i = 1; i <= n; i++){
        sort(begin(adj[i]), end(adj[i]));
    }
}

// 1 : RED, 2 : BLUE
bool bfs(int u){
    queue<int> q;
    q.push(u);
    color[u] = 1;
    while (!q.empty()){
        int v = q.front(); q.pop();
        for (int x : adj[v]){
            if (color[x] == 0){
                color[x] = 3 - color[v];
                q.push(x);
            }
            else if (color[x] == color[v]) return false;
        }
    }
    return true;
}

int main(){
    FileIO();
    input();

    bool ok = true;
    for (int i = 1; i <= n; i++){
        if (color[i] == 0){
            if (!bfs(i)){
                ok = false; break;
            }
        }
    }
    if (ok){
        for (int i = 1; i <= n; i++){
            cout << color[i] << " ";
        }
    } else cout << "IMPOSSIBLE";
}
