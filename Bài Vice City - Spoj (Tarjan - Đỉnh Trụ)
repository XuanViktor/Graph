Link Submit: https://www.spoj.com/problems/SUBMERGE/


#include <bits/stdc++.h>
using namespace std;
 
const int MAXN = 100005;
 
int n, m, timer = 0;
vector<int> adj[MAXN];
vector<int> result;
int disc[MAXN], low[MAXN];
bool visited[MAXN], AP[MAXN];
 
void input() {
    cin >> n >> m;
    if (n == 0 && m == 0) return;
    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    memset(visited, false, sizeof(visited));
    memset(AP, false, sizeof(AP));
}
 
void DFS(int u, int par) {
    visited[u] = true;
    disc[u] = low[u] = ++timer;
    int child = 0;
    for (int v : adj[u]) {
        if (v == par) continue;
        if (!visited[v]) {
            DFS(v, u);
            ++child;
            low[u] = min(low[u], low[v]);
            if (disc[u] <= low[v]) AP[u] = true;
        } else {
            low[u] = min(low[u], disc[v]);
        }
    }
    if (par == -1 && child <= 1) AP[u] = false;
}
 
int main() {
    while (true) {
        input();
        if (n == 0 && m == 0) break;
        int res = 0;
        for (int i = 1; i <= n; i++) {
            if (!visited[i]) DFS(i, -1);
        }
        for (int i = 1; i <= n; i++) {
            if (AP[i]) ++res;
        }
        memset(adj, 0, sizeof(adj));
        memset(disc, 0, sizeof(disc));
        memset(low, 0, sizeof(low));
        timer = 0;
        result.push_back(res);
    }
    for (int x : result) cout << x << endl;
    return 0;
}
