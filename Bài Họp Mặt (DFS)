Họp Mặt
Có k người (1 <= k <= 100) đứng tại vị trí nào đó trong N địa điểm cho trước (1 <= N <= 1000)
được đánh số từ 1..N Các điểm được nối với nhau bởi M đoạn đường một chiều 
(1 <= M <= 10000) (không có đoạn đường nào nối một điểm với chính nó). 
Mọi người muốn cùng tự hợp tại một địa điểm nào đó. 
Tuy nhiên, với các đường đi cho trước, chỉ có một số địa điểm nào đó có thể được chọn
là điểm hợp mặt. Cho trước K,N,M và vị trí ban đầu của K người cùng với M
đường 1 chiều, hãy xác định xem có bao nhiêu điểm có thể được chọn làm điểm họp mặt.

INPUT
Dòng 1: Ghi ra 3 số: K,N và M
Dòng 2 đến k + 1: dòng i + 1 chứa một số nguyên trong khoảng (1..N)
cho biết địa điểm mà người thứ i đang đứng
Dòng K + 2 đến M+K+1: Mỗi dòng ghi một cặp số A và B mô tả đoạn đường đi một chiều
từ A đến B (cả hai trong khoảng 1..N và A != B).

Constraints
(1 <= K <= 100), (1 <= N <= 1000), (1 <= M <= 100000)

OUTPUT
In ra số địa điểm có thể là chọn điểm hợp mặt

Sample Input   Output
 4 10 15        2
 1
 4
 5
 7
 10 3
 5 6
 4 9
 5 3
 8 6
 4 6
 8 9
 3 9
 1 9
 6 9
 7 9
 9 6
 7 3
 2 9
 5 9

Sample Input1    Output1
 2 4 4              2
 2
 3
 1 2
 1 4
 2 3
 3 4

#include <bits/stdc++.h>
using namespace std;


const int MAXN = 100005;
int n, m, k; 
bool visited[MAXN];
int d[MAXN];
vector<int> adj[MAXN];

void dfs(int u){
    d[u]++; visited[u] = true;
    for (int v : adj[u]){
        if (!visited[v]){
            dfs(v);
        }
    }
}

int main(){
    cin >> k >> n >> m;
    int nguoi[k];
    for (int &x : nguoi) cin >> x;
    for (int i = 0; i < m; i++){
        int x,y; cin >> x >> y;
        adj[x].push_back(y);
    }
    for (int x : nguoi){
        memset(visited, false, sizeof(visited));
        dfs(x);
    }

    int res = 0;
    for (int i = 1; i <= n; i++){
        if (d[i] == k){
            res += 1;
        }
    }
    cout << res;
}
