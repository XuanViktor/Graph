Bạn được cho một đồ thị không trọng số, và vô hướng. Viết chương trình để kiểm tra xem nó có phải là cây hay không.

Đầu vào
Dòng đầu tiên của đầu vào sẽ bao gồm 2 số nguyên N và M, tương ứng là số lượng các điểm và số lượng cạnh trên đồ thị, với 0 < N <= 10000, 0 <= M <= 20000. 
Tiếp theo là M dòng chứa thông tin M cạnh của đồ thị. Mỗi dòng bao gồm một cặp u,v, nghĩa là có 1 cạnh giữa 2 điểm u, v với 1 <= u,v <= N.

Đầu ra
In ra "YES" nếu như đồ thị đó là cây, ngược lại in ra "NO".

Ví dụ
Đầu vào:
3 2 
1 2 
2 3 

Đầu ra:
YES 

Ta thấy điều kiện cây là không có chu trình và 2 đỉnh bất kì chỉ duy nhất 1 đường đi và phải là liên thông
ta nhận thấy khi chỉ có m cạnh = n - 1 đỉnh thì đã thỏa không có chu trình và 2 đỉnh bất kì chỉ duy nhất 1 đường đ
=> chỉ cần kiểm tra nếu m = n - 1 và liên thông là được

#include <bits/stdc++.h>
using namespace std;

int n, m, k;
vector<int> adj[1000001];
bool visited[1000001];
int cnt = 0;

void inp(){
    cin >> n >> m;
    for (int i = 0; i < m; i++){
        int u, v; cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for (int i = 1; i <= n; i++){
        sort(begin(adj[i]), end(adj[i]));
    }
}

void dfs(int u){
    ++cnt;
    visited[u] = true;
    for (int v : adj[u]){
        if (!visited[v]) dfs(v);
    }
}

bool check(){
    dfs(1);
    if (cnt == n) return 1;
    else return 0;
}

int main(){
    inp();
    if (m == n - 1 && check()) cout << "YES";
    else cout << "NO";
}
