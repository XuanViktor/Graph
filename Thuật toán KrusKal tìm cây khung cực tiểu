#include <bits/stdc++.h>
using namespace std;

struct edge{
	int x, y, w;
};

int n, m;
int parent[1001], sz[1001];
vector<edge> dscanh;

void init(){
	for(int i = 1; i <= n; i++){
		parent[i] = i; // khoi tao cac dinh i co id la i
		sz[i] = 1; // kich thuoc tung dinh la 1
	}
}

int Find(int u){
	if(u == parent[u]) return u;
	else return parent[u] = Find(parent[u]);
}

bool Union(int u, int v){
	u = Find(u); 
	v = Find(v);
	if(u == v) return false; // neu u == v chung to do thi la chu trinh
	if(sz[u] < sz[v]){ // dung de luc nao cung cho u lon hon v cho de xu ly
		swap(u, v); //u la thang co size lon hon
	}
	sz[u] += sz[v]; // them tp v vao tp u ghi gop
	parent[v] = u; // va gan lai cho thang co parent be la u cho v
	return true;
}

void nhap(){
	cin >> n >> m;
	for (int i = 0; i < m; i++){
		int x, y, w; cin >> x >> y >> w;
		dscanh.push_back((edge){x,y,w});
	}
}

void Kruskal(){
	// Buoc 1: sap xep dscanh theo trong so tang dan
	sort(begin(dscanh), end(dscanh), [](edge a, edge b)->bool{
		return a.w < b.w;	
	});
	// Buoc 2: Lap
	int sum_weight = 0;
	vector<edge> MST; // luu cay khung cuc tieu
	for (int i = 0; i < m; i++){
		if (MST.size() == n-1) break; // dk cua cay khung co n - 1 canha
		edge e = dscanh[i]; // lay tung canh theo thu tu tang dan
		if (Union(e.x, e.y)){ // Neu 2 canh ghep duoc va khong tao thanh chu trinh
			MST.push_back(e);
			sum_weight += e.w;
		}
	}
	cout << sum_weight << endl;
	for (auto it : MST){
		cout << it.x << ' ' << it.y << ' ' << it.w << endl;
	}
}

int main(){
	nhap();
	init(); // khoi tao DSU
	Kruskal();
}
6 9
1 2 1
1 3 2
3 2 3
2 4 4
2 5 7
3 5 5
4 5 3
4 6 2
5 6 2
