Mạng Xã Hội
Tý đang xây dựng một mạng xã hội và mời các bạn của mình dùng thử. Bạn của bạn cũng là bạn.
Vì vậy. Tý muốn mạng xã hội của mình là hoàn hảo, tức là với mọi bộ ba X,Y,Z, 
nếu X kết bạn với y, Y kết bạn với Z thì X và Z cũng là bạn bè của nhau trên mạng xã hội.
Các bạn hãy xác định xem mạng xã hội hiện tại của Tý có là hoàn hảo hay không ?. 
Nếu có hãy in ra YES, NO trong trường hợp ngược lại

INPUT
Dòng đầu tiên là số lượng bộ test T (T ≤ 20).

Mỗi test bắt đầu bởi 2 số nguyên N và M (N, M ≤ 100 000).

M dòng tiếp theo, mỗi dòng gồm 2 số nguyên u, v (u #v) cho biết u và v là kết bạn với nhau trên mạng xã hội của Tý.

Constraints
1 <= N, M <= 100 000

OUTPUT
Với mỗi test, in ra đáp án tìm được trên một dòng.

Sample Input   Output
3                YES
4 3              NO
1 3              YES
3 4
1 4
4 4
3 1
2 3
3 4
1 2
10 4
4 3
5 10
8 9
1 2

#include <bits/stdc++.h>
using namespace std;

int n, m, cnt;
vector<int> adj[100001];
bool visited[100001];
vector<int> Comp;

void input(){
    cin >> n >> m;
    for (int i = 0; i < m; i++){
        int x, y; 
        cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}

void dfs(int u){
    ++cnt;
    visited[u] = true;
    Comp.push_back(u);
    for (int x : adj[u]){
        if (!visited[x]){
            dfs(x);
        }
    }
}

int main(){
    int t; cin >> t;
    while (t--){
        input();
        bool valid = true;
        for (int i = 1; i <= n; i++){
            cnt = 0;
            if (!visited[i]){
                Comp.clear();
                dfs(i);
                for (int x : Comp){
                    if ((int)adj[x].size() != cnt - 1){
                        valid = false;
                        break;
                    }
                }
            }
            if (!valid) {
                break;
            }
        }
        if (valid) cout << "YES" << endl;
        else cout << "NO" << endl;

        // Reset
        memset(visited, false, sizeof(visited));
        Comp.clear();
        for (int i = 1; i <= n; i++){
            adj[i].clear();
        }
    }
    return 0;
}

Cách 2
void dfs(int u){
    ++cnt;
    visited[u] = true;
    for (int x : adj[u]){
        if (!visited[x]){
            dfs(x);
        }
    }
}

int main(){
    int canh = 0;
    for (int i = 1; i <= n; i++){
        if (!used[i]){
            cnt = 0;
            dfs(i);
            canh += cnt*(cnt-1)/2;
        }
    }
}
