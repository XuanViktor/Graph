Kiểm tra tính liên thông mạnh

Cho đồ thị có hướng G = <V,E> được biểu diễn dưới dạng sanh sách cạnh. Hãy kiểm tra xem đồ thị có liên thông mạnh hay không ?
Input
Dòng đầu tiên đưa vào T là số lượng bộ test
Những dòng tiếp theo đưa vào các bộ test. Mỗi bộ test gồm 2 dòng
Dòng đầu tiên đưa vào hai số v và e tương ứng với số đỉnh và số cạnh
Dòng tiếp theo đừa vào các bộ đôi u và v tứng ứng với một cạnh của đồ thị.

Output 
Đưa ra YES hoặc NO theo từng dòng tương ứng với test là liên thông mạnh hoặc 
không liên thông mạnh

Constrains
1 <= T <= 100
1 <= V <= 10^3
1 <= E <= V*(V-1)/2

Input
2
6 9
1 2 
2 4
3 1
3 2
3 5
4 3
5 4
5 6
6 3
3 3
1 2
2 3
3 1

Output
YES
YES

int n, m;
vector<int> adj[100005], T_adj[100005];
bool visited[100005];
stack<int> st;

void inp(){
    cin >> n >> m;
    for (int i = 0; i < m; i++){
        int x,y; cin >> x >> y;
        adj[x].push_back(y);
        T_adj[y].push_back(x);
    }
}

void dfs1(int u){
    visited[u] = true;
    for (int v : adj[u]){
        if (!visited[v]){
            dfs1(v);
        }
    }
    st.push(u);
}

void dfs2(int u){
    visited[u] = true;
    for (int v : T_adj[u]){
        if (!visited[v]){
            dfs2(v);
        }
    }
}

void Kosaraju(){
    // B1 goi dfs1 va luu vao stack
    memset(visited, false, sizeof(visited));
    for (int i = 1; i <= n; i++){
        if (!visited[i]){
            dfs1(i);
        }
    }

    // B3 pop tung dinh trong stack va dfs2
    int cnt = 0;
    memset(visited, false, sizeof(visited));
    while (!st.empty()){
        int u = st.top(); st.pop();
        if (!visited[u]){
            ++cnt;
            dfs2(u);
        }
    }
    if (cnt == 1) cout << "YES" << endl;
    else cout << "NO" << endl;
}

int main(){
    faster;
    int t; cin >> t;
    while (t--){
        inp();
        Kosaraju();
        for (int i = 1; i <= n; i++){
            adj[i].clear();
            T_adj[i].clear();
        }
    }
}
