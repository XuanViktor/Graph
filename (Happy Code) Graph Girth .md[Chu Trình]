Link: https://cses.fi/problemset/task/1707

Given an undirected graph, your task is to determine its girth, i.e., the length of its shortest cycle.
Input
The first input line has two integers n and m: the number of nodes and edges. The nodes are numbered 1,2,\dots,n.
After this, there are m lines describing the edges. Each line has two integers a and b: there is an edge between nodes a and b.
You may assume that there is at most one edge between each two nodes.
Output
Print one integer: the girth of the graph. If there are no cycles, print -1.
Constraints

1 \le n \le 2500
1 \le m \le 5000

Example
Input:
5 6
1 2
1 3
2 4
2 5
3 4
4 5

Output:
3

int tmp = 1e9, n, m;
vector<int> adj[MAXN];
vector<bool> visited(MAXN, false);
vector<int> dis(MAXN, 1e9);
vector<int> parent(MAXN, -1);
 
void inp(){
    cin >> n >> m;
    for (int i = 0 ; i < m; i++){
        int x, y; cin >> x >> y;
        adj[x].push_back(y);
        adj[y].push_back(x);
    }
}
 
int BFS(int u){
    visited.assign(n, false);
    dis.assign(n, 1e9);
    parent.assign(n, -1);
    int ans = 1e9;
    visited[u] = true;
    dis[u] = 0;
    queue<int> q;
    q.push(u);
    while (!q.empty()){
        int father_node = q.front(); q.pop();
        for (int x : adj[father_node]){
            int son_node = x;
            if (!visited[son_node]){
                visited[son_node] = true;
                dis[son_node] = dis[father_node] + 1;
                q.push(son_node);
                parent[son_node] = father_node;
            }
            else if (son_node != parent[father_node]){
                int value = dis[son_node] + dis[father_node] + 1;
                if (value == 2) continue; 
                ans = min(ans, value);
            }
        }
    }
    return ans;
}
 
int main(){
    inp();
    for (int i = 1; i <= n; i++){
        tmp = min(tmp, BFS(i));
    }
    if (tmp == 1e9) cout << -1;
    else cout << tmp;
}
