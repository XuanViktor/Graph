Cho đơn đồ thị vô hướng liên thông G = (V, E) gồm N đỉnh và M cạnh, các đỉnh được đánh
số từ 1 tới N và các cạnh được đánh số từ 1 tới M.

Có Q truy vấn, mỗi truy vấn yêu cầu bạn tìm đường đi ngắn nhất giữa đỉnh X[i] tới Y[i].
Input:
Dòng đầu tiên hai số nguyên N và M (1 ≤ N ≤ 100, 1 ≤ M ≤ N*(N-1)/2).
M dòng tiếp theo, mỗi dòng gồm 3 số nguyên u, v, c cho biết có cạnh nối giữa đỉnh u và v có độ dài bằng c (1 ≤ c ≤ 1000).
Tiếp theo là số lượng truy vấn Q (1 ≤ Q ≤ 100 000).
Q dòng tiếp theo, mỗi dòng gồm 2 số nguyên X[i], Y[i].
Output:
Với mỗi truy vấn, in ra đáp án là độ dài đường đi ngắn nhất tìm được.

INPUT     OUTPUT

5 6         8
1 2 6       10
1 3 7       3
2 4 8
3 4 9
3 5 1
4 5 2
#include <bits/stdc++.h>
using namespace std;

int n,m;
int a[1005][1005];

void input(){
    cin >> n >> m;
    for (int i = 1; i <= n; i++){
        for (int j = 1; j <= n; j++){
            if (i == j) a[i][j] = 0; // Cho các đỉnh xuất phát là 0
            else a[i][j] = 1e9; // các đỉnh còn lại là vô cực
        }
    }

    for (int i = 0; i < m; i++){
        int x, y, z; cin >> x >> y >> z;
        a[x][y] = z;
        a[y][x] = z;
    }
}

void Floyd(){
    for (int k = 1; k <= n; k++){
        for (int i = 1; i <= n; i++){
            for (int j = 1; j <= n; j++){
                a[i][j] = min(a[i][j], a[i][k] + a[k][j]);
            }
        }
    }
}
int main(){
    input();
    Floyd();
    int q; cin >> q;
    while (q--){
        int x,y; cin >> x >> y;
        cout << a[x][y] << endl;
    }
}
