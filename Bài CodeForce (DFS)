Link Submit: https://codeforces.com/contest/1829/problem/E
E. The Lakes

You are given an n×m grid a of non-negative integers. The value ai,j represents the depth of water at the i-th row and j-th column.
A lake is a set of cells such that: each cell in the set has ai,j>0, and
there exists a path between any pair of cells in the lake by going up, down, left, or right a number of times and without stepping on a cell with ai,j=0.
The volume of a lake is the sum of depths of all the cells in the lake.
Find the largest volume of a lake in the grid.

Input
The first line contains a single integer t (1≤t≤104) — the number of test cases.
The first line of each test case contains two integers n,m (1≤n,m≤1000) — the number of rows and columns of the grid, respectively.
Then n lines follow each with m integers ai,j (0≤ai,j≤1000) — the depth of the water at each cell.
It is guaranteed that the sum of n⋅m over all test cases does not exceed 106.

Output
For each test case, output a single integer — the largest volume of a lake in the grid.

Example
inputCopy
5
3 3
1 2 0
3 4 0
0 0 5
1 1
0
3 3
0 1 1
1 0 1
1 1 1
5 5
1 1 1 1 1
1 0 0 0 1
1 0 5 0 1
1 0 0 0 1
1 1 1 1 1
5 5
1 1 1 1 1
1 0 0 0 1
1 1 4 0 1
1 0 0 0 1
1 1 1 1 1
outputCopy
10
0
7
16
21

#include <bits/stdc++.h>
using namespace std;

const int MAXN = 1000;
pair<int, int> move0[4] = {{-1, 0}, {0, -1}, {0, 1}, {1, 0}}; // edge
int n, m, a[MAXN][MAXN];

void input() {
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }
}

int dfs(int i, int j) {
    int sum = a[i][j];
    a[i][j] = 0;
    for (int k = 0; k < 4; k++) {
        int i1 = i + move0[k].first;
        int j1 = j + move0[k].second;
        if (i1 >= 0 && i1 < n && j1 >= 0 && j1 < m && a[i1][j1] != 0) {
            sum += dfs(i1, j1);
        }
    }
    return sum;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        input();
        int max_component_sum = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (a[i][j] != 0) {
                    int component_sum = dfs(i, j);
                    max_component_sum = max(max_component_sum, component_sum);
                }
            }
        }

        cout << max_component_sum << endl;
    }
    return 0;
}
