#include <bits/stdc++.h>
using namespace std;

int n,m;
vector<pair<int,int>> adj[100001];

void nhap(){
	cin >> n >> m;
	for (int i = 0; i < m; i++){
		int x, y, w; cin >> x >> y >> w;
		adj[x].push_back({y,w});
		adj[y].push_back({x,w});
	}
}

void Dijkstra(int s){
	vector<int> d(n + 1, 1e9);
	d[s] = 0;
	priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> Q;
	Q.push({0,s});
	
	while (!Q.empty()){
		// Chon ra dinh u co duong ngan nhat 
		pair<int,int> top = Q.top(); Q.pop();
		int u = top.second, kc = top.first;
		if (kc > d[u]) continue;
		
		for (auto it : adj[u]){
			int v = it.first, w = it.second;
			if (d[v] > d[u] + w){
				d[v] = d[u] + w;
				Q.push({d[v], v});
			}
		}
	}
}

int main(){
	nhap();
	Dijkstra(1);
}

6 8
1 2 1
2 3 1
1 3 5
2 4 4
3 5 2
5 4 2
4 6 2
5 6 7



#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

const int MAX_N = 100001;
int n, m;
vector<pair<int,int>> adj[MAX_N];
int parent[MAX_N];

void nhap(){
    cin >> n >> m;
    for (int i = 0; i < m; i++){
        int x, y, w; cin >> x >> y >> w;
        adj[x].push_back({y,w});
         adj[y].push_back({x,w});
    }
}

void Dijkstra(int s, int d){
    vector<int> dist(n + 1, 1e9);
    dist[s] = 0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> Q;
    Q.push({0,s});
    
    while (!Q.empty()){
        pair<int,int> top = Q.top(); Q.pop();
        int u = top.second, kc = top.first;
        if (kc > dist[u]) continue;
        
        for (auto it : adj[u]){
            int v = it.first, w = it.second;
            if (dist[v] > dist[u] + w){
                dist[v] = dist[u] + w;
                Q.push({dist[v], v});
                parent[v] = u;
            }
        }
    }
    
    if (dist[s] == 1e9 || dist[d] == 1e9) {
        cout << -1 << endl;
    } 
    else {
        // lần đường đi
        vector<int> path;
        int curr = d;
        while (curr != s) {
            path.push_back(curr);
            curr = parent[curr];
        }
        path.push_back(s);
        
        int cost = dist[d];  // Cost of the path from s to d
        cout << cost << endl;


        for (int i = path.size() - 1; i >= 0; i--) {
            cout << path[i];
            if (i != 0) {
                cout << " ";
            }
        }
        cout << endl;
    }
}
int main(){
    nhap();
    int source, destination;
    cin >> source >> destination;
    Dijkstra(source, destination);
    return 0;
}

Input            Output
7 12             9
1 2 3            1 2 3 6 77
1 3 5
2 3 1
2 4 5
2 5 3
3 4 2
3 6 2
4 5 4
4 6 2
5 6 1
5 7 6
6 7 3
1 7

